// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/domain/interfaces/featureflag_interfaces.go

// Package mock is a generated GoMock package.
package featureflag

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockFeatureFlagRepository is a mock of Adapter interface.
type MockFeatureFlagRepository struct {
	ctrl     *gomock.Controller
	recorder *MockFeatureFlagRepositoryMockRecorder
}

// MockFeatureFlagRepositoryMockRecorder is the mock recorder for MockFeatureFlagRepository.
type MockFeatureFlagRepositoryMockRecorder struct {
	mock *MockFeatureFlagRepository
}

// NewMockFeatureFlagRepository creates a new mock instance.
func NewMockFeatureFlagRepository(ctrl *gomock.Controller) *MockFeatureFlagRepository {
	mock := &MockFeatureFlagRepository{ctrl: ctrl}
	mock.recorder = &MockFeatureFlagRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFeatureFlagRepository) EXPECT() *MockFeatureFlagRepositoryMockRecorder {
	return m.recorder
}

// DeleteFF mocks base method.
func (m *MockFeatureFlagRepository) DeleteFF(key string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFF", key)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteFF indicates an expected call of DeleteFF.
func (mr *MockFeatureFlagRepositoryMockRecorder) DeleteFF(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFF", reflect.TypeOf((*MockFeatureFlagRepository)(nil).DeleteFF), key)
}

// GetAllFF mocks base method.
func (m *MockFeatureFlagRepository) GetAllFF() (map[string]Entity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllFF")
	ret0, _ := ret[0].(map[string]Entity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllFF indicates an expected call of GetAllFF.
func (mr *MockFeatureFlagRepositoryMockRecorder) GetAllFF() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllFF", reflect.TypeOf((*MockFeatureFlagRepository)(nil).GetAllFF))
}

// GetFF mocks base method.
func (m *MockFeatureFlagRepository) GetFF(key string) (Entity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFF", key)
	ret0, _ := ret[0].(Entity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFF indicates an expected call of GetFF.
func (mr *MockFeatureFlagRepositoryMockRecorder) GetFF(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFF", reflect.TypeOf((*MockFeatureFlagRepository)(nil).GetFF), key)
}

// SaveFF mocks base method.
func (m *MockFeatureFlagRepository) SaveFF(input Entity) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveFF", input)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveFF indicates an expected call of SaveFF.
func (mr *MockFeatureFlagRepositoryMockRecorder) SaveFF(input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveFF", reflect.TypeOf((*MockFeatureFlagRepository)(nil).SaveFF), input)
}
