// Code generated by MockGen. DO NOT EDIT.
// Source: internal/domain/interfaces/contenthub_interfaces.go

// Package mocks is a generated GoMock package.
package contenthub

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockContentHubRepository is a mock of Repository interface.
type MockContentHubRepository struct {
	ctrl     *gomock.Controller
	recorder *MockContentHubRepositoryMockRecorder
}

// MockContentHubRepositoryMockRecorder is the mock recorder for MockContentHubRepository.
type MockContentHubRepositoryMockRecorder struct {
	mock *MockContentHubRepository
}

// NewMockContentHubRepository creates a new mock instance.
func NewMockContentHubRepository(ctrl *gomock.Controller) *MockContentHubRepository {
	mock := &MockContentHubRepository{ctrl: ctrl}
	mock.recorder = &MockContentHubRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockContentHubRepository) EXPECT() *MockContentHubRepositoryMockRecorder {
	return m.recorder
}

// DeleteContentHub mocks base method.
func (m *MockContentHubRepository) DeleteContentHub(key string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteContentHub", key)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteContentHub indicates an expected call of DeleteContentHub.
func (mr *MockContentHubRepositoryMockRecorder) DeleteContentHub(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteContentHub", reflect.TypeOf((*MockContentHubRepository)(nil).DeleteContentHub), key)
}

// GetAllContentHub mocks base method.
func (m *MockContentHubRepository) GetAllContentHub() (map[string]Entity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllContentHub")
	ret0, _ := ret[0].(map[string]Entity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllContentHub indicates an expected call of GetAllContentHub.
func (mr *MockContentHubRepositoryMockRecorder) GetAllContentHub() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllContentHub", reflect.TypeOf((*MockContentHubRepository)(nil).GetAllContentHub))
}

// GetContentHub mocks base method.
func (m *MockContentHubRepository) GetContentHub(key string) (Entity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContentHub", key)
	ret0, _ := ret[0].(Entity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContentHub indicates an expected call of GetContentHub.
func (mr *MockContentHubRepositoryMockRecorder) GetContentHub(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContentHub", reflect.TypeOf((*MockContentHubRepository)(nil).GetContentHub), key)
}

// SaveContentHub mocks base method.
func (m *MockContentHubRepository) SaveContentHub(input Entity) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveContentHub", input)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveContentHub indicates an expected call of SaveContentHub.
func (mr *MockContentHubRepositoryMockRecorder) SaveContentHub(input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveContentHub", reflect.TypeOf((*MockContentHubRepository)(nil).SaveContentHub), input)
}
